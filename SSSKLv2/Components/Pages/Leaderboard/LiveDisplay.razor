@page "/leaderboard/livedisplay/{productId}"
@rendermode InteractiveServer

@implements IAsyncDisposable
@inject IProductService ProductService
@inject IApplicationUserService UserService
@inject IJSRuntime JS
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IWebHostEnvironment Env
@using SSSKLv2.Components.Layout
@using SSSKLv2.Data
@using SSSKLv2.Dto
@using SSSKLv2.Services.Interfaces
@layout EmptyLayout;

<PageTitle>SSSKLv2 | Live Leaderboard</PageTitle>

<script src="/js/fireworks.js?v=2"></script>
<script src="/js/leaderboard.js?v=1"></script>

@if (Env?.IsDevelopment() == true)
{
    <div class="position-absolute p-2" style="right:0;top:0;z-index:3000;">
        <button class="btn btn-sm btn-outline-light" @onclick="TestCelebrate">Test Celebrate</button>
    </div>
}

@* Achievement celebration overlay *@
@if (ShowAchievementOverlay && CurrentAchievementEvent != null)
{
    <div class="sssk-celebrate-overlay" role="dialog" aria-modal="true">
        <div class="sssk-celebrate-content">
            @if (!string.IsNullOrEmpty(CurrentAchievementEvent.ImageUrl) && _achievementImageLoaded)
            {
                <img src="@CurrentAchievementEvent.ImageUrl" alt="@CurrentAchievementEvent.AchievementName" class="sssk-celebrate-image" />
            }
            <h2 class="sssk-celebrate-title">@CurrentAchievementEvent.AchievementName</h2>
            <p class="sssk-celebrate-user">@CurrentAchievementEvent.UserFullName</p>
        </div>
    </div>
}

<style>
    .sssk-celebrate-overlay {
        position: fixed;
        inset: 0;
        background: rgba(0,0,0,0.45);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 2050; /* above fireworks canvas (1030) */
        /* slower fade so it's more perceivable */
        animation: sssk-fade-in 1200ms ease-out forwards;
        pointer-events: none; /* allow clicks through if needed; content will be non-pointer */
    }
    .sssk-celebrate-content {
        pointer-events: auto;
        text-align: center;
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        background: linear-gradient(180deg, rgba(255,255,255,0.05), rgba(255,255,255,0.02));
        backdrop-filter: blur(6px) saturate(120%);
        box-shadow: 0 8px 30px rgba(0,0,0,0.6);
        max-width: 90vw;
        width: 560px;
        transform-origin: center;
        /* slightly longer pop so it's visible but snappy */
        animation: sssk-pop-in 420ms cubic-bezier(.16,.84,.44,1) forwards;
    }
    .sssk-celebrate-image {
        max-height: 180px;
        object-fit: contain;
        margin-bottom: 0.8rem;
        border-radius: 8px;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }
    .sssk-celebrate-title { margin: 0.2rem 0; font-weight: 700; font-size: 1.6rem; }
    .sssk-celebrate-user { opacity: 0.95; margin: 0; }

    @@keyframes sssk-fade-in { from { opacity: 0 } to { opacity: 1 } }
    @@keyframes sssk-pop-in { from { opacity: 0; transform: translateY(8px) scale(0.98) } to { opacity: 1; transform: translateY(0) scale(1) } }
</style>

@if (Product != null)
{
    <div class="row vh-100 align-items-center">
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            @if (AllTimeLeaderboard.Any())
            {
                <h5>All Time Leaderboard</h5>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th scope="col">Plek</th>
                            <th scope="col">Naam</th>
                            <th scope="col">Hoeveelheid</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var l in AllTimeLeaderboard)
                        {
                            <tr>
                                <td>#@l.Position</td>
                                <td>@l.FullName</td>
                                <td>@l.Amount</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <h5>Er is nog niets van dit product besteld.</h5>
            }
        </div>
        <div class="col-md-6 text-center h-100 row justify-content-center">
            <div class="row h-50">
                <div></div>
                <div class="col-12">
                    @if (Leaderboard.Any())
                    {
                        <h5>Leaderboard</h5>
                        <div class="table-responsive text-start">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th scope="col">Plek</th>
                                    <th scope="col">Naam</th>
                                    <th scope="col">Hoeveelheid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var l in Leaderboard)
                                {
                                    <tr>
                                        <td>#@l.Position</td>
                                        <td>@l.FullName</td>
                                        <td>@l.Amount</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <h5>Er is de afgelopen 12 uur geen @Product.Name besteld.</h5>
                    }
                </div>
            </div>
            <div class="row h-50">
                <div></div>
                <div class="col-12">
                    @if (LatestOrders.Any())
                    {
                        <h5>Laatste Bestellingen</h5>
                        <p>Totale aankopen: @TotalQuantity</p>
                        <div class="table-responsive text-start">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th scope="col">Tijd</th>
                                    <th scope="col">Naam</th>
                                    <th scope="col">Product</th>
                                    <th scope="col">Hoeveelheid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var o in LatestOrders
                                              .OrderByDescending(x => x.Timestamp)
                                              .Take(10))
                                {
                                    <tr>
                                        <td>@o.Timestamp.ToString("HH:mm")</td>
                                        <td>@o.UserName</td>
                                        <td>@o.ProductName</td>
                                        <td>@o.Quantity</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <h5>Er is de afgelopen 12 uur geen enkel product besteld.</h5>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <h1 class="display-1">Dit product is bestaat niet meer of heeft nooit bestaan.</h1>
    </div>
}


@code {
    [Parameter]
    public string? ProductId { get; set; }
    
    public HubConnection? Hub;
    public Product? Product { get; set; }
    public IEnumerable<LeaderboardEntryDto> Leaderboard { get; set; } = new List<LeaderboardEntryDto>();
    public IEnumerable<LeaderboardEntryDto> AllTimeLeaderboard { get; set; } = new List<LeaderboardEntryDto>();
    
    public IList<UserPurchaseEvent> LatestOrders { get; } = new List<UserPurchaseEvent>();
    public int TotalQuantity = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await InitializeHubConnection();
        await GetData();
    }

    private async Task InitializeHubConnection()
    {
        Hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/livemetrics"))
            .WithAutomaticReconnect()
            .Build();
        await Hub.StartAsync();
        
        Hub.On<UserPurchaseEvent>("UserPurchase", async dto =>
        {
            ToevoegenPurchaseDto(dto);
            await GetData();
            await InvokeAsync(StateHasChanged);
        });
        
        Hub.On<AchievementEvent>("Achievement", async dto =>
        {
            // Await celebration so it runs immediately and overlaps with any other UI updates
            await CelebrateAchievement(dto);
            await GetData();
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task GetData()
    {
        if (ProductId != null)
        {
            var id = Guid.Parse(ProductId);
            Product = await ProductService.GetProductById(id);
            Leaderboard = await UserService.Get12HourlyLiveLeaderboard(id);
            AllTimeLeaderboard = await UserService.GetAllLeaderboard(id);
        }
    }
    
    private void ToevoegenPurchaseDto(UserPurchaseEvent @event)
    {
        LatestOrders.Add(@event);
        TotalQuantity += @event.Quantity;
    }
    
    private bool ShowAchievementOverlay { get; set; } = false;
    private AchievementEvent? CurrentAchievementEvent { get; set; }
    private CancellationTokenSource? _achievementCts;
    private bool _achievementImageLoaded = false;

    private async Task CelebrateAchievement(AchievementEvent @event)
    {
        // Cancel any previous celebration
        try
        {
            _achievementCts?.Cancel();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error cancelling previous achievement task: {ex}");
        }

        _achievementCts = new CancellationTokenSource();
        var token = _achievementCts.Token;

        CurrentAchievementEvent = @event;
        _achievementImageLoaded = false; // reset
        // Start fireworks first so they are visible behind the overlay
        try
        {
            await JS.InvokeVoidAsync("fireworks.start");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start fireworks: {ex.Message}");
        }

        // Attempt to preload the image while we wait a short time for the UI to render.
        if (!string.IsNullOrEmpty(CurrentAchievementEvent?.ImageUrl))
        {
            try
            {
                // Start a JS preload and wait up to 2s for it while still honoring the UI render delay below.
                var jsPreloadTask = JS.InvokeAsync<bool>("leaderboard.preloadImage", CurrentAchievementEvent.ImageUrl).AsTask();
                var renderDelayTask = Task.Delay(800, token);

                // Wait for the render delay (so fireworks canvas is visible), but let preload run concurrently with a timeout
                var finished = await Task.WhenAny(jsPreloadTask, Task.Delay(4000, token));
                if (finished == jsPreloadTask && jsPreloadTask.IsCompletedSuccessfully && jsPreloadTask.Result)
                {
                    _achievementImageLoaded = true;
                }
                else
                {
                    // preload failed or timed out; we'll still show the overlay but hide the image to avoid a broken image icon
                    _achievementImageLoaded = false;
                    Console.WriteLine("Achievement image preload failed or timed out.");
                }

                // Ensure we still wait the short render delay so fireworks render behind overlay
                try { await renderDelayTask; } catch (OperationCanceledException) { }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error preloading achievement image: {ex.Message}");
                try { await Task.Delay(800, token); } catch (OperationCanceledException) { }
            }
        }
        else
        {
            // No image to preload; still give a small render delay
            try { await Task.Delay(800, token); } catch (OperationCanceledException) { }
        }

        ShowAchievementOverlay = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            // Show for ~5 seconds or until cancelled
            await Task.Delay(5000, token);
        }
        catch (OperationCanceledException)
        {
            // ignore
        }
        finally
        {
            // stop fireworks and hide
            try
            {
                await JS.InvokeVoidAsync("fireworks.stop");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to stop fireworks: {ex.Message}");
            }
            ShowAchievementOverlay = false;
            CurrentAchievementEvent = null;
            _achievementImageLoaded = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public Task TestCelebrate()
    {
        // Use a known reachable placeholder image so testing shows the image.
        var sample = new AchievementEvent("Top Seller", "Demo User", "https://via.placeholder.com/300x180.png?text=Achievement");
        return CelebrateAchievement(sample);
    }

    public async ValueTask DisposeAsync()
    {
        // Cancel any running celebration
        try
        {
            _achievementCts?.Cancel();
            _achievementCts?.Dispose();
            _achievementCts = null;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disposing achievement CTS: {ex}");
        }

        // Ensure fireworks are stopped
        try
        {
            await JS.InvokeVoidAsync("fireworks.stop");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error stopping fireworks during dispose: {ex}");
        }

        // Dispose hub connection
        if (Hub != null)
        {
            try
            {
                await Hub.DisposeAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error disposing SignalR hub: {ex}");
            }
            Hub = null;
        }
    }
}
