@using SSSKLv2.Services.Interfaces
@using SSSKLv2.Components.Account
@inherits LayoutComponentBase
@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider StateProvider
@inject IApplicationUserService ApplicationUserService
@inject IHeaderService HeaderService

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-3">
            <AuthorizeView Policy="@Policies.User">
                <Authorized>
                    <SaldoView />
                </Authorized>
            </AuthorizeView>
            <AuthorizeView Policy="@Policies.Admin">
                <Authorized>
                    <SaldoView />
                </Authorized>
            </AuthorizeView>
            <ul class="nav ml-auto">
                <AuthorizeView>
                    <NotAuthorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="Account/Login">Inloggen</NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
                <AuthorizeView Policy="@Policies.User">
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="btn btn-link" href="Account/Manage">@HeaderService.Name</NavLink>
                        </li>
                        <li class="nav-item">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                                <button type="submit" class="nav-link">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Uitloggen
                                </button>
                            </form>
                        </li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Policy="@Policies.Admin">
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="btn btn-link" href="Account/Manage">@HeaderService.Name</NavLink>
                        </li>
                        <li class="nav-item">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                                <button type="submit" class="nav-link">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Uitloggen
                                </button>
                            </form>
                        </li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Policy="@Policies.Kiosk">
                    <Authorized>
                        <li class="nav-item">
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken/>
                                <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                                <button type="submit" class="nav-link">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Uitloggen
                                </button>
                            </form>
                        </li>
                    </Authorized>
                </AuthorizeView>
            </ul>
        </div>
        <article class="content px-3 pb-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" style="color: black;">
    Er is een fout opgetreden.
    <a href="" class="reload">Herladen</a>
    <a class="dismiss">🗙</a>
</div>
@code{
    public static string? Name { get; set; }
    public static string? Saldo { get; set; }

    private string? currentUrl;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
        
        await UpdateData();

        StateHasChanged();
    }
    

    public async Task UpdateData() 
    {
        var state = await StateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
        {
            var user = await ApplicationUserService.GetUserByUsername(state.User.Identity.Name!);
            HeaderService.Name = user.Name;
        }
        StateHasChanged();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}