@page "/pos"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Authorization
@using SSSKLv2.Data
@using SSSKLv2.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using BlazorComponentUtilities
@using Blazored.Toast.Configuration
@using SSSKLv2.Validators
@attribute [Authorize]

@inject IHeaderService HeaderService
@inject AuthenticationStateProvider AuthStateProvider
@inject IApplicationUserService ApplicationUserService
@inject IProductService ProductService
@inject IOrderService OrderService
@inject IAchievementService AchievementService
@inject IToastService ToastService
@inject IJSRuntime JS

<PageTitle>SSSKLv2 | Bestellen</PageTitle>

@if (Model!.Products == null || Model!.Users == null)
{
    <p>Laden...</p>
}
else
{
    <EditForm method="post" Model="@Model" OnValidSubmit="@Submit" FormName="Bestellen" Enhance>
        <DataAnnotationsValidator />
        <ValidationSummary class="text1-danger" />
        <div class="row">
            <div class="col-md-4 mb-3">
                <h4>Wat</h4>
                <div class="row">
                    @foreach (var product in Model.Products)
                    {
                        string css = new CssBuilder()
                            .AddClass("btn")
                            .AddClass("select-button")
                            .AddClass("btn-secondary", when: !product.Selected)
                            .AddClass("btn-primary", when: product.Selected)
                            .AddClass("bg-body-tertiary")
                            .AddClass("border-3")
                            .AddClass("w-100")
                            .AddClass("h-100")
                            .AddClass("m-1")
                            .AddClass("text-start")
                            .AddClass("my-1")
                            .ToString() ?? string.Empty;
                        
                        <div class="col-6 p-0 pe-3 pb-2">
                            <button type="button" class="@css" @onclick="@(e => OnClick(e, product))">
                                <InputCheckbox class="form-check-input btn-select-checkbox me-1" @bind-Value="product.Selected" />
                                @product.Value.Name <small class="text-nowrap">@product.Value.Price.ToString("C")</small>
                            </button>
                        </div>
                    }
                </div>
            </div>
            <div class="col-md-4 mb-3">
                <h4>Wie</h4>
                <div class="row">
                    @foreach (var user in Model.Users)
                    {
                        string css = new CssBuilder()
                            .AddClass("btn")
                            .AddClass("select-button")
                            .AddClass("btn-secondary", when: !user.Selected)
                            .AddClass("btn-primary", when: user.Selected)
                            .AddClass("bg-body-tertiary")
                            .AddClass("border-3")
                            .AddClass("w-100")
                            .AddClass("h-100")
                            .AddClass("m-1")
                            .AddClass("text-start")
                            .AddClass("my-1")
                            .ToString() ?? string.Empty;
                        
                        <div class="col-6 p-0 pe-3 pb-2">
                            <button type="button" class="@css" @onclick="@(e => OnClick(e, user))">
                                <InputCheckbox class="form-check-input btn-select-checkbox me-1" @bind-Value="user.Selected"/>
                                @user.Value.FullName
                            </button>
                        </div>
                    }
                </div>
            </div>    
            <div class="col-md-4">
                <h4>Betalen</h4>
                <div class="row mb-2">
                    <div class="col-12">
                        <div class="form-check">
                            <InputCheckbox @bind-Value="@Model.Split" class="form-check-input" id="splitCheckbox"/>
                            <label class="form-check-label" for="splitCheckbox">
                                Rekening splitten?
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="input-group mb-3 w-100">
                        <span class="input-group-text" id="basic-addon1">Aantal</span>
                        <InputNumber @bind-Value="@Model.Amount" class="form-control"/>
                        <button type="submit" class="btn btn-primary">Betalen</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
    
    <BlazoredToasts Position="ToastPosition.BottomRight"
                    Timeout=5
                    SuccessIcon="bi bi-check-circle"
                    WarningIcon="bi bi-exclamation-triangle"
                    ErrorIcon="bi bi-x-octagon"/>

    <script src="/js/fireworks.js?v=2"></script>

    <style>
        /* Achievement modal/backdrop animations */
        .sssk-achievement-overlay {
            /* initial transparent background; keyframes will animate to semi-opaque */
            background-color: rgba(0,0,0,0);
            animation: sssk-backdrop 420ms ease-out forwards;
        }
        @@keyframes sssk-backdrop {
            from { background-color: rgba(0,0,0,0); }
            to { background-color: rgba(0,0,0,0.5); }
        }

        .sssk-modal-content {
            transform-origin: center top;
            opacity: 0;
            transform: translateY(8px) scale(0.985);
            animation: sssk-modal-enter 420ms cubic-bezier(.16,.84,.44,1) forwards;
        }
        @@keyframes sssk-modal-enter {
            from { opacity: 0; transform: translateY(8px) scale(0.985); }
            to   { opacity: 1; transform: translateY(0) scale(1); }
        }
    </style>

    @* Achievement modal: shows when there are unseen AchievementEntries *@
    @if (ShowAchievementModal && AchievementEntries.Any())
    {
        <div class="modal fade show d-block sssk-achievement-overlay" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content sssk-modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@((AchievementEntries.Count > 1) ? "Nieuwe prestaties behaald!" : "Nieuwe prestatie behaald!")</h5>
                        <button type="button" class="btn-close" @onclick="CloseAchievementModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        @if (CurrentAchievement != null)
                        {
                            <div class="text-center">
                                @if (!string.IsNullOrEmpty(CurrentAchievement.Achievement?.Image?.Uri))
                                {
                                    <img src="@CurrentAchievement.Achievement.Image.Uri" alt="@CurrentAchievement.Achievement.Name" class="img-fluid mb-3" />
                                }
                                <h4>@CurrentAchievement.Achievement?.Name</h4>
                                <p>@CurrentAchievement.Achievement?.Description</p>
                                <small class="text-muted">Voor: @CurrentAchievement.User?.Name @CurrentAchievement.User?.Surname</small>
                            </div>
                        }
                        else
                        {
                            <p>Geen prestatie gevonden.</p>
                        }
                    </div>
                    <div class="modal-footer">
                        @if (AchievementEntries.Count > CurrentAchievementIndex + 1)
                        {
                            <button class="btn btn-primary" @onclick="ShowNextAchievement">Volgende</button>
                        }
                        <button class="btn btn-secondary" @onclick="CloseAchievementModal">Sluit</button>
                    </div>
                </div>
            </div>
        </div>
    }
} 

@code {

    [SupplyParameterFromForm]
    public BestellingDto Model { get; set; } = new();
    
    public IList<AchievementEntry> AchievementEntries { get; set; } = new List<AchievementEntry>();

    // --- modal state ---
    private bool ShowAchievementModal { get; set; } = false;
    private int CurrentAchievementIndex { get; set; } = 0;
    private AchievementEntry? CurrentAchievement => (AchievementEntries != null && AchievementEntries.Count > CurrentAchievementIndex)
        ? AchievementEntries[CurrentAchievementIndex]
        : null;

    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    public async Task GetData()
    {
        Model.Products = (await ProductService.GetAllAvailable())
            .Select(x => new Select<Product> {Value = x})
            .ToList();
        Model.Users = (await ApplicationUserService.GetAllUsers())
            .Select(x => new Select<ApplicationUser> {Value = x})
            .ToList();
        await SelectCurrentUser();
    }

    private async Task SelectCurrentUser()
    {
        var user = await AuthStateProvider.GetAuthenticationStateAsync();
        var userModel = Model.Users
            .SingleOrDefault(x => x.Value.UserName == user.User.Identity?.Name);
        if (userModel != null) userModel.Selected = true;
    }

    private async Task<bool> CheckIfNotGuest()
    {
        var user = await AuthStateProvider.GetAuthenticationStateAsync();
        if (user.User.IsInRole("Guest"))
        {
            ToastService.ShowError("Je bent een gast en kan niet bestellen. Moet je dit wel kunnen doen? Neem contact op met de beheerder.");
            return false;
        }

        return true;
    }

    public async Task Clear()
    {
        Model = new();
        await GetData();
    }

    public async Task Submit()
    {
        BestellingDtoValidator validator = new BestellingDtoValidator();
        var validationResults = validator.Validate(Model);

        if (await CheckIfNotGuest() == false) return;
        if (!validationResults.IsValid)
        {
            foreach (var err in validationResults.Errors)
            {
                ToastService.ShowError(err.ErrorMessage);
            }
            return;
        }
        
        await OrderService.CreateOrder(Model);
        ToastService.ShowSuccess("Betaling gelukt");
        await Clear();
        HeaderService.NotifyHeaderChanged();

        var user = (await AuthStateProvider.GetAuthenticationStateAsync()).User.Identity?.Name ?? string.Empty;
        var entries = (await AchievementService.GetPersonalUnseenAchievementEntries(user))?.ToList() ?? new List<AchievementEntry>();
        AchievementEntries = entries;

        // If there are unseen achievements, start fireworks immediately and show the modal after 2s
        if (AchievementEntries.Any())
        {
            CurrentAchievementIndex = 0;
            // start fireworks first so they appear BEFORE the modal
            await StartFireworksAsync();
            // delay modal to let fireworks be visible a bit earlier
            await Task.Delay(2000);
            ShowAchievementModal = true;
            StateHasChanged();
        }
    }

    private void OnClick(MouseEventArgs args, Select select)
    {
        select.Selected = !select.Selected;
    }

    private async Task StartFireworksAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("fireworks.start");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to start fireworks: {ex.Message}");
        }
    }

    private async Task StopFireworksAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("fireworks.stop");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to stop fireworks: {ex.Message}");
        }
    }

    // New helper methods for modal
    private async Task CloseAchievementModal()
    {
        // stop fireworks and clear entries
        await StopFireworksAsync();
        AchievementEntries.Clear();
        ShowAchievementModal = false;
        CurrentAchievementIndex = 0;
        StateHasChanged();
    }

    private void ShowNextAchievement()
    {
        if (AchievementEntries == null || !AchievementEntries.Any()) return;
        if (CurrentAchievementIndex + 1 < AchievementEntries.Count)
        {
            CurrentAchievementIndex++;
            StateHasChanged();
        }
        else
        {
            // reached the end -> close
            _ = CloseAchievementModal();
        }
    }

    public class Select
    {
        public bool Selected { get; set; }
    }

    public class Select<T> : Select
    {
        public T Value { get; set; } = default!;
    }

    public class BestellingDto
    {
        [MinLength(1, ErrorMessage = "Er moeten minimaal 1 of meer producten worden geselecteerd")]
        public IList<Select<Product>> Products { get; set; } = new List<Select<Product>>();
        [MinLength(1, ErrorMessage = "Er moeten minimaal 1 of meer gebruikers worden geselecteerd")]
        public IList<Select<ApplicationUser>> Users { get; set; } = new List<Select<ApplicationUser>>();
        [Required]
        public int Amount { get; set; } = 1;
        public bool Split { get; set; }

        public bool CheckStock()
        {
            var selected = Products
                .Where(x => x.Selected);
            var enumerable = selected as Select<Product>[] ?? selected.ToArray();
            if (enumerable.Any())
            {
                return enumerable.Max(x => x.Value.Stock) >= Amount;
            }

            return true;
        }
    }
}
