@page "/admin/achievements/entries/assign"
@rendermode InteractiveServer

@attribute [Authorize(Policy = Policies.Admin)]

@using SSSKLv2.Services.Interfaces
@using SSSKLv2.Data
@using SSSKLv2.Data.DAL.Interfaces
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@using SSSKLv2.Components.Account

@inject IAchievementService AchievementService
@inject IApplicationUserRepository ApplicationUserRepository

<PageTitle>SSSKLv2 | Achievement toewijzen</PageTitle>

<div class="row crud-form-header">
    <div class="col-9 title-container">
        <h1>Achievement toewijzen</h1>
    </div>
    <div class="col-3 text-end back-container">
        <a class="btn btn-secondary" href="/admin/achievements"><i class="bi bi-arrow-left"></i></a>
    </div>
</div>
<hr />

<div class="card">
    <div class="card-body">
        @if (isLoading)
        {
            <p><em>Laden...</em></p>
        }
        else
        {
            <EditForm Model="Model" OnValidSubmit="AssignAchievement" Enhance="true">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label for="achievementSelect" class="form-label">Achievement</label>
                    <InputSelect id="achievementSelect" @bind-Value="Model.AchievementId" class="form-select">
                        <option value="">-- Selecteer achievement --</option>
                        @foreach (var a in Achievements)
                        {
                            <option value="@a.Id">@a.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Model.AchievementId" class="text-danger" />
                </div>

                <div class="mb-3">
                    <label for="userSelect" class="form-label">Gebruiker</label>
                    <InputSelect id="userSelect" @bind-Value="Model.UserId" class="form-select">
                        <option value="">-- Selecteer gebruiker --</option>
                        @foreach (var u in Users)
                        {
                            <option value="@u.Id">@u.Name @u.Surname (@u.Email)</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Model.UserId" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary">Toewijzen</button>
                <a class="btn btn-secondary ms-2" href="/admin/achievements">Annuleren</a>

                @if (!string.IsNullOrEmpty(StatusMessage))
                {
                    <div class="mt-3 alert @StatusClass" role="alert">@StatusMessage</div>
                }
            </EditForm>
        }
    </div>
</div>

@code {
    class AssignModel
    {
        [Required(ErrorMessage = "Selecteer een achievement")]
        public Guid? AchievementId { get; set; }

        [Required(ErrorMessage = "Selecteer een gebruiker")]
        public string? UserId { get; set; }
    }

    AssignModel Model { get; set; } = new();

    List<Achievement> Achievements { get; set; } = new();
    List<ApplicationUser> Users { get; set; } = new();

    bool isLoading = true;
    string StatusMessage = string.Empty;
    string StatusClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    async Task LoadData()
    {
        isLoading = true;
        try
        {
            var ach = await AchievementService.GetAchievements();
            Achievements = ach.OrderBy(a => a.Name).ToList();
            Users = (await ApplicationUserRepository.GetAll()).OrderBy(u => u.Name).ToList();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    async Task AssignAchievement()
    {
        StatusMessage = string.Empty;
        StatusClass = "alert-info";

        if (Model.AchievementId == null || string.IsNullOrEmpty(Model.UserId))
        {
            StatusMessage = "Selecteer zowel een achievement als een gebruiker.";
            StatusClass = "alert-warning";
            return;
        }

        try
        {
            var success = await AchievementService.AwardAchievementToUser(Model.UserId!, Model.AchievementId.Value);
            if (success)
            {
                StatusMessage = "Achievement succesvol toegewezen.";
                StatusClass = "alert-success";
            }
            else
            {
                StatusMessage = "De gebruiker heeft het achievement al of het achievement bestaat niet.";
                StatusClass = "alert-warning";
            }
        }
        catch (Exception ex)
        {
            StatusMessage = $"Fout bij toewijzen: {ex.Message}";
            StatusClass = "alert-danger";
        }
    }
}
