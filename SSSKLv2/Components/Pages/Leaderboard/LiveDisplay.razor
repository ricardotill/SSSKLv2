@page "/leaderboard/livedisplay/{productId}"
@rendermode InteractiveServer

@implements IAsyncDisposable
@inject IProductService ProductService;
@inject IApplicationUserService UserService;
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@using SSSKLv2.Components.Layout
@using SSSKLv2.Data
@using SSSKLv2.Dto
@using SSSKLv2.Services
@using SSSKLv2.Services.Interfaces
@layout EmptyLayout;

<PageTitle>SSSKLv2 | Live Leaderboard</PageTitle>

@if (Product != null)
{
    <div class="row vh-100 align-items-center">
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            @if (AllTimeLeaderboard.Any())
            {
                <h5>All Time Leaderboard</h5>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th scope="col">Plek</th>
                            <th scope="col">Naam</th>
                            <th scope="col">Hoeveelheid</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var l in AllTimeLeaderboard)
                        {
                            <tr>
                                <td>#@l.Position</td>
                                <td>@l.FullName</td>
                                <td>@l.Amount</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <h5>Er is nog niets van dit product besteld.</h5>
            }
        </div>
        <div class="col-md-6 text-center h-100 row justify-content-center">
            <div class="row h-50">
                <div></div>
                <div class="col-12">
                    @if (Leaderboard.Any())
                    {
                        <h5>Leaderboard</h5>
                        <div class="table-responsive text-start">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th scope="col">Plek</th>
                                    <th scope="col">Naam</th>
                                    <th scope="col">Hoeveelheid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var l in Leaderboard)
                                {
                                    <tr>
                                        <td>#@l.Position</td>
                                        <td>@l.FullName</td>
                                        <td>@l.Amount</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <h5>Er is de afgelopen 12 uur geen @Product.Name besteld.</h5>
                    }
                </div>
            </div>
            <div class="row h-50">
                <div></div>
                <div class="col-12">
                    @if (LatestOrders.Any())
                    {
                        <h5>Laatste Bestellingen</h5>
                        <p>Totale aankopen: @TotalQuantity</p>
                        <div class="table-responsive text-start">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th scope="col">Tijd</th>
                                    <th scope="col">Naam</th>
                                    <th scope="col">Product</th>
                                    <th scope="col">Hoeveelheid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var o in LatestOrders
                                              .OrderByDescending(x => x.Timestamp)
                                              .Take(10))
                                {
                                    <tr>
                                        <td>@o.Timestamp.ToString("HH:mm")</td>
                                        <td>@o.UserName</td>
                                        <td>@o.ProductName</td>
                                        <td>@o.Quantity</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <h5>Er is de afgelopen 12 uur geen enkel product besteld.</h5>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <h1 class="display-1">Dit product is bestaat niet meer of heeft nooit bestaan.</h1>
    </div>
}


@code {
    [Parameter]
    public string? ProductId { get; set; }
    
    public HubConnection? Hub;
    public Product? Product { get; set; }
    public IEnumerable<LeaderboardEntryDto> Leaderboard { get; set; } = new List<LeaderboardEntryDto>();
    public IEnumerable<LeaderboardEntryDto> AllTimeLeaderboard { get; set; } = new List<LeaderboardEntryDto>();
    
    public IList<UserPurchaseDto> LatestOrders { get; } = new List<UserPurchaseDto>();
    public int TotalQuantity = 0;
    
    protected override async Task OnInitializedAsync()
    {
        await InitializeHubConnection();
        await GetData();
    }

    private async Task InitializeHubConnection()
    {
        Hub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/purchases"))
            .WithAutomaticReconnect()
            .Build();
        await Hub.StartAsync();
        
        Hub.On<UserPurchaseDto>("UserPurchase", async dto =>
        {
            ToevoegenPurchaseDto(dto);
            await GetData();
            await InvokeAsync(StateHasChanged);
        });
    }

    private async Task GetData()
    {
        if (ProductId != null)
        {
            var id = Guid.Parse(ProductId);
            Product = await ProductService.GetProductById(id);
            Leaderboard = await UserService.Get12HourlyLiveLeaderboard(id);
            AllTimeLeaderboard = await UserService.GetAllLeaderboard(id);
        }
    }
    
    private void ToevoegenPurchaseDto(UserPurchaseDto dto)
    {
        LatestOrders.Add(dto);
        TotalQuantity += dto.Quantity;
    }

    public async ValueTask DisposeAsync()
    {
        if (Hub != null) await Hub.DisposeAsync();
    }
}