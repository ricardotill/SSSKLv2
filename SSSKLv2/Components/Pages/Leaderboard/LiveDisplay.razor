@page "/leaderboard/livedisplay/{productId}"
@rendermode InteractiveServer

@implements IDisposable
@implements IAsyncDisposable
@inject IProductService ProductService;
@inject IApplicationUserService UserService;
@inject IOrderService OrderService;
@using SSSKLv2.Components.Layout
@using SSSKLv2.Data
@using SSSKLv2.Services
@using SSSKLv2.Services.Interfaces
@layout EmptyLayout;

<PageTitle>SSSKLv2 | Live Leaderboard</PageTitle>

@if (Product != null)
{
    <div class="row vh-100 align-items-center">
        <div class="col-md-6">
            <h3>@Product.Name</h3>
            @if (AllTimeLeaderboard.Any())
            {
                <h5>All Time Leaderboard</h5>
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th scope="col">Plek</th>
                            <th scope="col">Naam</th>
                            <th scope="col">Hoeveelheid</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var l in AllTimeLeaderboard)
                        {
                            <tr>
                                <td>#@l.Position</td>
                                <td>@l.FullName</td>
                                <td>@l.Amount</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <h5>Er is nog niets van dit product besteld.</h5>
            }
        </div>
        <div class="col-md-6 text-center h-100 row justify-content-center">
            <div class="row h-50">
                <div></div>
                <div class="col-12">
                    @if (Leaderboard.Any())
                    {
                        <h5>Leaderboard</h5>
                        <div class="table-responsive text-start">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th scope="col">Plek</th>
                                    <th scope="col">Naam</th>
                                    <th scope="col">Hoeveelheid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var l in Leaderboard)
                                {
                                    <tr>
                                        <td>#@l.Position</td>
                                        <td>@l.FullName</td>
                                        <td>@l.Amount</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <h5>Er is de afgelopen 12 uur geen @Product.Name besteld.</h5>
                    }
                </div>
            </div>
            <div class="row h-50">
                <div></div>
                <div class="col-12">
                    @if (LatestOrders.Any())
                    {
                        <h5>Laatste Bestellingen</h5>
                        <div class="table-responsive text-start">
                            <table class="table table-striped">
                                <thead>
                                <tr>
                                    <th scope="col">Tijd</th>
                                    <th scope="col">Naam</th>
                                    <th scope="col">Product</th>
                                    <th scope="col">Hoeveelheid</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var o in LatestOrders)
                                {
                                    <tr>
                                        <td>@o.CreatedOn.ToString("HH:mm")</td>
                                        <td>@o.User.Name @o.User.Surname.First()</td>
                                        <td>@o.ProductName</td>
                                        <td>@o.Amount</td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <h5>Er is de afgelopen 12 uur geen enkel product besteld.</h5>
                    }
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="text-center">
        <h1 class="display-1">Dit product is bestaat niet meer of heeft nooit bestaan.</h1>
    </div>
}


@code {
    [Parameter]
    public string? ProductId { get; set; }
    
    Timer timer;
    
    public Product? Product { get; set; }
    public IEnumerable<LeaderboardEntry> Leaderboard { get; set; } = new List<LeaderboardEntry>();
    public IEnumerable<LeaderboardEntry> AllTimeLeaderboard { get; set; } = new List<LeaderboardEntry>();
    public IEnumerable<Order> LatestOrders { get; set; } = new List<Order>();
    
    protected override async Task OnInitializedAsync()
    {
        await GetData();
        timer = new Timer(async _ =>
        {
            await GetData();
            await InvokeAsync(StateHasChanged);
        }, null, 0, 15000);
    }

    private async Task GetData()
    {
        if (ProductId != null)
        {
            var id = Guid.Parse(ProductId);
            Product = await ProductService.GetProductById(id);
            Leaderboard = await UserService.Get12HourlyLiveLeaderboard(id);
            AllTimeLeaderboard = await UserService.GetAllLeaderboard(id);
        }
        LatestOrders = await OrderService.GetLatestOrders();
    }

    public void Dispose()
    {
        timer.Dispose();
    }

    public ValueTask DisposeAsync()
    {
        return timer.DisposeAsync();
    }
}