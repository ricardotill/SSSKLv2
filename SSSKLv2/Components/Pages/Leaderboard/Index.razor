@page "/leaderboard"
@rendermode InteractiveServer

@using SSSKLv2.Services.Interfaces
@using SSSKLv2.Data
@inject IApplicationUserService ApplicationUserService
@inject IProductService ProductService

<PageTitle>SSSKLv2 | Leaderboard</PageTitle>

<div class="row">
    <div class="col-8">
        <h1>Leaderboard</h1>
    </div>
    <div class="col-4 text-end">
        <button class="btn btn-secondary me-1" @onclick="@UpdateLeaderboards"><i class="bi bi-arrow-clockwise"></i></button>
        <a class="btn btn-primary" href="/leaderboard/livedisplay/@SelectedProductId"><i class="bi bi-tv"></i></a>
    </div>
</div>

<div class="mb-3">
    <label for="productSelect" class="form-label">Selecteer een product</label>
    <select @bind="SelectedProductId" @bind:after="@UpdateLeaderboards" class="form-control form-select" id="productSelect" aria-label="Select Product">
        @foreach (var p in Products)
        {
            <option value="@p.Id">@p.Name</option>
        }
    </select>
</div>

<h3>Afgelopen 12 uur</h3>
@if (Recently.Any())
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col">Plek</th>
                <th scope="col">Naam</th>
                <th scope="col">Hoeveelheid</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var l in Recently)
            {
                <tr>
                    <td>#@l.Position</td>
                    <td>@l.FullName</td>
                    <td>@l.Amount</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Er zijn deze periode geen aankopen gedaan. Dus ik zou zeggen, bestellen maar! ;)</p>
}

<h3>Maandelijks</h3>
@if (Monthly.Any())
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col">Plek</th>
                <th scope="col">Naam</th>
                <th scope="col">Hoeveelheid</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var l in Monthly)
            {
                <tr>
                    <td>#@l.Position</td>
                    <td>@l.FullName</td>
                    <td>@l.Amount</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Er zijn deze periode geen aankopen gedaan. Dus ik zou zeggen, bestellen maar! ;)</p>
}

<h3>Totaal</h3>
@if (All.Any())
{
    <div class="table-responsive">
        <table class="table table-striped">
            <thead>
            <tr>
                <th scope="col">Plek</th>
                <th scope="col">Naam</th>
                <th scope="col">Hoeveelheid</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var l in All)
            {
                <tr>
                    <td>#@l.Position</td>
                    <td>@l.FullName</td>
                    <td>@l.Amount</td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}
else
{
    <p>Er zijn deze periode geen aankopen gedaan. Dus ik zou zeggen, bestellen maar! ;)</p>
}


@code {
    public IEnumerable<Product> Products { get; set; } = new List<Product>();
    public string? SelectedProductId { get; set; }
    
    public IEnumerable<LeaderboardEntry> Recently { get; set; } = new List<LeaderboardEntry>();
    public IEnumerable<LeaderboardEntry> Monthly { get; set; } = new List<LeaderboardEntry>();
    public IEnumerable<LeaderboardEntry> All { get; set; } = new List<LeaderboardEntry>();
    
    protected override async Task OnInitializedAsync()
    {
        await GetData();
    }

    private async Task GetData()
    {
        Products = await ProductService.GetAll();
        SelectedProductId = Products.FirstOrDefault()?.Id.ToString();
        await UpdateLeaderboards();
    }

    public async Task UpdateLeaderboards()
    {
        if (SelectedProductId != null)
        {
            var product = Products.FirstOrDefault(x => x.Id == new Guid(SelectedProductId));
            if (product != null)
            {
                Recently = await ApplicationUserService.Get12HourlyLeaderboard(product.Id);
                Monthly = await ApplicationUserService.GetMonthlyLeaderboard(product.Id);
                All = await ApplicationUserService.GetAllLeaderboard(product.Id);
            }
        }
    }
}