@page "/orders"
@rendermode InteractiveServer
@attribute [Authorize]

@implements IDisposable
@implements IAsyncDisposable

@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject IOrderService OrderService
@inject AuthenticationStateProvider AuthenticationStateProvider
@using SSSKLv2.Data
@using SSSKLv2.Services.Interfaces
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore

<PageTitle>SSSKLv2 | Geschiedenis</PageTitle>

<h1>Bestelgeschiedenis</h1>

<div class="table-responsive">
    <QuickGrid Items="@Orders" Pagination="@Pagination">
        <PropertyColumn Title="Datum" Property="@(o => o.CreatedOn)" Format="dd/MM/yyyy HH:mm" Sortable="true" Align="Align.Left" />
        <PropertyColumn Title="Product" Property="@(o => o.ProductNaam)" Sortable="true" Align="Align.Left" />
        <PropertyColumn Title="Hoeveel" Property="@(o => o.Amount)" Sortable="true" Align="Align.Right" />
        <PropertyColumn Title="Betaald" Property="@(o => o.Paid)" Format="C" Sortable="true" Align="Align.Right" />
        <TemplateColumn Context="order">
            <a class="btn btn-danger btn-sm" href="@($"orders/delete?id={order.Id}")" role="button"><i class="bi bi-trash"></i></a>
        </TemplateColumn>
    </QuickGrid>
</div>

<Paginator State="@Pagination" />

@code {
    public IQueryable<Order> Orders = default!;
    public PaginationState Pagination = new PaginationState();
    
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private ApplicationDbContext? DbContext;

    protected override async Task OnInitializedAsync()
    {
        DbContext = await DbContextFactory.CreateDbContextAsync();
        await GetDataAsync();
    }

    private async Task GetDataAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (state.User.Identity != null && state.User.Identity.IsAuthenticated)
        {
            if (state.User.Identity.Name != null && DbContext != null)
                Orders = OrderService.GetPersonalQueryable(state.User.Identity.Name, DbContext);
        }
    }

    public void Dispose()
    {
        DbContext?.Dispose();
    }

    public async ValueTask DisposeAsync()
    {
        if (DbContext != null) await DbContext.DisposeAsync();
    }

}
